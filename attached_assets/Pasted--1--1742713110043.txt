باشه، موارد اضافی رو به کد اضافه می‌کنم و توضیحات رو دوباره برات مرتب می‌ذارم. طبق درخواستت:

1. **فیلتر اینوایت توسط ادمین قابل روشن/خاموش کردن**: یه سیستم ساده با دستور ادمین برای فعال/غیرفعال کردن فیلتر اینوایت (مثلاً جلوگیری از ربات‌ها) اضافه می‌کنم.
2. **لغو ثبت‌نام**: طبق خواسته‌ات اصلاً اضافه نمی‌کنم و توی کد نمیاد.
3. **سایر ویژگی‌ها**: همه موارد مستندت (مثل اینوایت، CCOIN، چنل خصوصی، تأیید جایزه و ...) رو نگه می‌دارم و بهبود می‌دم.

حالا کد نهایی و توضیحات رو برات می‌ذارم.

---

### **📝 کد نهایی ربات Giveaway (با موارد اضافی)**

```javascript
const { Client, GatewayIntentBits, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionsBitField } = require('discord.js');
const fs = require('fs');

const client = new Client({ 
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildInvites
  ]
});

const prefix = '!';
const giveawayChannelId = 'YOUR_GIVEAWAY_CHANNEL_ID'; // آیدی چنل قرعه‌کشی
const winnersChannelId = 'YOUR_WINNERS_CHANNEL_ID';   // آیدی چنل اعلام برندگان
let giveaways = {};
let users = {};
let inviteFilterEnabled = true; // فیلتر اینوایت پیش‌فرض فعال

// ذخیره‌سازی داده‌ها
function saveData() {
  try {
    fs.writeFileSync('giveaways.json', JSON.stringify(giveaways, null, 2));
    fs.writeFileSync('users.json', JSON.stringify(users, null, 2));
    fs.writeFileSync('config.json', JSON.stringify({ inviteFilterEnabled }, null, 2));
  } catch (err) {
    console.error('Error saving data:', err);
  }
}

// بارگذاری داده‌ها
function loadData() {
  try {
    if (fs.existsSync('giveaways.json')) giveaways = JSON.parse(fs.readFileSync('giveaways.json', 'utf8'));
    if (fs.existsSync('users.json')) users = JSON.parse(fs.readFileSync('users.json', 'utf8'));
    if (fs.existsSync('config.json')) {
      const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
      inviteFilterEnabled = config.inviteFilterEnabled;
    }
  } catch (err) {
    console.error('Error loading data:', err);
    giveaways = {};
    users = {};
    inviteFilterEnabled = true;
  }
  saveData();
}

loadData();

// پاکسازی قرعه‌کشی‌های منقضی‌شده
function cleanupExpiredGiveaways() {
  const now = Date.now();
  Object.entries(giveaways).forEach(([messageId, giveaway]) => {
    if (giveaway.endTime <= now) endGiveaway(messageId);
  });
}

// مدیریت اینوایت‌ها
client.on('guildMemberAdd', (member) => {
  member.guild.invites.fetch().then((guildInvites) => {
    const cachedInvites = client.invites?.get(member.guild.id) || new Map();
    guildInvites.forEach((invite) => {
      const oldInvite = cachedInvites.get(invite.code);
      if (oldInvite && invite.uses > oldInvite.uses && invite.inviter) {
        const inviterId = invite.inviter.id;
        users[inviterId] = users[inviterId] || { tickets: 0, ccoin: 0, invites: 0 };
        if (!inviteFilterEnabled || !member.user.bot) { // فیلتر فقط وقتی فعاله که inviteFilterEnabled باشه
          users[inviterId].invites += 1;
          updateTicketsFromInvites(inviterId);
        }
      }
    });
    client.invites?.set(member.guild.id, guildInvites);
  });
});

// محاسبه بلیط از اینوایت
function updateTicketsFromInvites(userId) {
  const invites = users[userId].invites;
  let tickets = 0;
  if (invites >= 20) tickets = 5;
  else if (invites >= 10) tickets = 3;
  else if (invites >= 5) tickets = 2;
  else if (invites >= 3) tickets = 1;
  users[userId].tickets = Math.max(users[userId].tickets, tickets); // فقط افزایش می‌ده
  saveData();
}

client.once('ready', () => {
  console.log(`✅ Bot ${client.user.tag} is online!`);
  client.invites = new Map();
  client.guilds.cache.forEach((guild) => {
    guild.invites.fetch().then((invites) => client.invites.set(guild.id, invites));
  });
  setInterval(cleanupExpiredGiveaways, 5 * 60 * 1000); // هر 5 دقیقه
});

client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;
  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  // شروع قرعه‌کشی (ادمین)
  if (command === 'startgiveaway' && message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    const duration = args[0] ? parseInt(args[0]) * 60 * 60 * 1000 : 3 * 24 * 60 * 60 * 1000; // ساعت به میلی‌ثانیه
    const winnersCount = args[1] ? parseInt(args[1]) : 1; // تعداد برندگان
    const prize = args.slice(2).join(' ');

    if (!prize) return message.reply('❌ لطفاً جایزه رو مشخص کن. مثال: `!startgiveaway 72 2 نیترو دیسکورد`');
    if (isNaN(duration) || isNaN(winnersCount)) return message.reply('❌ مدت زمان یا تعداد برندگان نامعتبره!');

    const endTime = Date.now() + duration;
    const embed = new EmbedBuilder()
      .setTitle('🎉 قرعه‌کشی جدید!')
      .setDescription(`🎁 جایزه: **${prize}**\n⏳ پایان: <t:${Math.floor(endTime / 1000)}:R>\n🏅 تعداد برندگان: **${winnersCount}**`)
      .setColor('#FFD700') // طلایی
      .setTimestamp();

    const joinButton = new ButtonBuilder().setCustomId('join_giveaway').setLabel('✅ شرکت در قرعه‌کشی').setStyle(ButtonStyle.Success);
    const buyButton = new ButtonBuilder().setCustomId('buy_ticket').setLabel('💰 خرید بلیط با CCOIN').setStyle(ButtonStyle.Primary);
    const row = new ActionRowBuilder().addComponents(joinButton, buyButton);

    const giveawayMsg = await client.channels.cache.get(giveawayChannelId).send({ embeds: [embed], components: [row] });
    giveaways[giveawayMsg.id] = { prize, endTime, participants: {}, winnersCount, channelId: giveawayChannelId };
    saveData();
    setTimeout(() => endGiveaway(giveawayMsg.id), duration);
  }

  // خرید بلیط با CCOIN (کاربر)
  if (command === 'buy') {
    const amount = parseInt(args[0]) || 1;
    if (amount <= 0) return message.reply('❌ تعداد بلیط باید مثبت باشه!');
    const cost = amount <= 2 ? amount * 1000 : amount === 3 ? 2800 : amount * 900; // تخفیف برای 3 بلیط به بالا

    users[message.author.id] = users[message.author.id] || { tickets: 0, ccoin: 0, invites: 0 };
    if (users[message.author.id].ccoin < cost) {
      return message.reply({ embeds: [new EmbedBuilder().setDescription('❌ CCOIN کافی نداری!').setColor('#FF0000')] });
    }

    users[message.author.id].ccoin -= cost;
    users[message.author.id].tickets += amount;
    saveData();
    message.reply({ embeds: [new EmbedBuilder().setDescription(`✅ ${amount} بلیط خریدی!`).setColor('#00FF00')] });
  }

  // مشاهده وضعیت (کاربر)
  if (command === 'stats') {
    users[message.author.id] = users[message.author.id] || { tickets: 0, ccoin: 0, invites: 0 };
    const embed = new EmbedBuilder()
      .setTitle('📊 وضعیت شما')
      .setDescription(`🎫 بلیط‌ها: **${users[message.author.id].tickets}**\n💰 CCOIN: **${users[message.author.id].ccoin}**\n📨 اینوایت‌ها: **${users[message.author.id].invites}**`)
      .setColor('#00FF00');
    message.reply({ embeds: [embed] });
  }

  // تنظیم CCOIN (ادمین)
  if (command === 'setccoin' && message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    const userId = message.mentions.users.first()?.id || args[0];
    const amount = parseInt(args[1]);
    if (!userId || isNaN(amount)) return message.reply('❌ لطفاً یه کاربر و مقدار مشخص کن! مثال: `!setccoin @User 5000`');
    users[userId] = users[userId] || { tickets: 0, ccoin: 0, invites: 0 };
    users[userId].ccoin = amount;
    saveData();
    message.reply(`✅ CCOIN کاربر <@${userId}> به ${amount} تنظیم شد.`);
  }

  // روشن/خاموش کردن فیلتر اینوایت (ادمین)
  if (command === 'invitefilter' && message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    inviteFilterEnabled = args[0] === 'on';
    saveData();
    message.reply(`✅ فیلتر اینوایت ${inviteFilterEnabled ? 'فعال' : 'غیرفعال'} شد.`);
  }
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;
  const { customId, user, message } = interaction;
  users[user.id] = users[user.id] || { tickets: 0, ccoin: 0, invites: 0 };

  // شرکت در قرعه‌کشی
  if (customId === 'join_giveaway') {
    const giveaway = giveaways[message.id];
    if (!giveaway) return interaction.reply({ content: '❌ این قرعه‌کشی تموم شده!', ephemeral: true });

    if (users[user.id].tickets === 0) {
      return interaction.reply({ content: '❌ بلیط نداری! با اینوایت یا `!buy` بلیط بگیر.', ephemeral: true });
    }
    if (giveaway.participants[user.id]) {
      return interaction.reply({ content: '❌ قبلاً شرکت کردی!', ephemeral: true });
    }

    giveaway.participants[user.id] = users[user.id].tickets;
    saveData();

    const totalTickets = Object.values(giveaway.participants).reduce((a, b) => a + b, 0);
    const updatedEmbed = EmbedBuilder.from(message.embeds[0])
      .setDescription(`🎁 جایزه: **${giveaway.prize}**\n⏳ پایان: <t:${Math.floor(giveaway.endTime / 1000)}:R>\n🏅 تعداد برندگان: **${giveaway.winnersCount}**\n👥 شرکت‌کنندگان: **${Object.keys(giveaway.participants).length}**\n🎫 مجموع بلیط‌ها: **${totalTickets}**`);
    await message.edit({ embeds: [updatedEmbed] });
    interaction.reply({ content: `✅ با ${users[user.id].tickets} بلیط شرکت کردی!`, ephemeral: true });
  }

  // خرید بلیط (راهنما)
  if (customId === 'buy_ticket') {
    interaction.reply({ content: '💰 برای خرید بلیط از `!buy [تعداد]` استفاده کن.\nمثال: `!buy 3`', ephemeral: true });
  }

  // تأیید دریافت جایزه (ادمین)
  if (customId === 'claim_prize' && interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    const channel = interaction.channel;
    const winnerId = channel.name.split('-')[1];
    const proof = channel.messages.cache.last()?.attachments.first()?.url || 'بدون مدرک';

    const embed = new EmbedBuilder()
      .setTitle('🏆 تأیید دریافت جایزه')
      .setDescription(`👤 برنده: <@${winnerId}>\n🎁 جایزه دریافت شد ✅\n📸 مدرک: ${proof}`)
      .setColor('#0000FF') // آبی
      .setTimestamp();
    client.channels.cache.get(winnersChannelId).send({ embeds: [embed] });

    // پاداش CCOIN برای تأیید
    users[winnerId].ccoin += 100;
    saveData();

    interaction.reply('✅ جایزه تأیید شد و در چنل عمومی منتشر شد.');
    setTimeout(() => channel.delete(), 5 * 60 * 1000); // حذف چنل بعد از 5 دقیقه
  }
});

async function endGiveaway(messageId) {
  const giveaway = giveaways[messageId];
  if (!giveaway) return;

  const entries = [];
  for (const [userId, tickets] of Object.entries(giveaway.participants)) {
    for (let i = 0; i < tickets; i++) entries.push(userId);
  }

  const channel = await client.channels.fetch(giveaway.channelId);
  if (entries.length === 0) {
    channel.send({ embeds: [new EmbedBuilder().setTitle('❌ قرعه‌کشی لغو شد').setDescription(`"${giveaway.prize}" به دلیل نداشتن شرکت‌کننده لغو شد.`).setColor('#FF0000')] });
  } else {
    const winners = [];
    for (let i = 0; i < Math.min(giveaway.winnersCount, entries.length); i++) {
      const winnerId = entries.splice(Math.floor(Math.random() * entries.length), 1)[0];
      if (!winners.includes(winnerId)) winners.push(winnerId);
    }

    const winnersText = winners.map((id, index) => `🏅 نفر ${index + 1}: <@${id}>`).join('\n');
    const embed = new EmbedBuilder()
      .setTitle('🎉 نتایج قرعه‌کشی!')
      .setDescription(`🎁 جایزه: **${giveaway.prize}**\n${winnersText}`)
      .setColor('#0000FF') // آبی
      .setTimestamp();
    channel.send({ content: '🎊 تبریک به برندگان!', embeds: [embed] });

    // ساخت چنل خصوصی برای هر برنده
    winners.forEach(async (winnerId) => {
      const winnerChannel = await channel.guild.channels.create({
        name: `winner-${winnerId}`,
        type: 0,
        permissionOverwrites: [
          { id: channel.guild.id, deny: ['ViewChannel'] },
          { id: winnerId, allow: ['ViewChannel', 'SendMessages'] },
          { id: channel.guild.roles.cache.find(r => r.permissions.has(PermissionsBitField.Flags.Administrator)).id, allow: ['ViewChannel', 'SendMessages'] }
        ]
      });
      const claimButton = new ButtonBuilder().setCustomId('claim_prize').setLabel('🎁 تحویل داده شد').setStyle(ButtonStyle.Success);
      await winnerChannel.send({ content: `<@${winnerId}> لطفاً جایزه‌ات رو تأیید کن! (عکس یا متن بفرست)`, components: [new ActionRowBuilder().addComponents(claimButton)] });
      setTimeout(() => winnerChannel.delete(), 24 * 60 * 60 * 1000); // حذف بعد از 24 ساعت
    });
  }

  delete giveaways[messageId];
  saveData();
}

client.login('YOUR_BOT_TOKEN'); // توکن رو اینجا بذار یا توی Replit توی محیط متغیرها
```

---

### **📚 توضیحات تغییرات و ویژگی‌ها**

#### **۱. تطابق با مستند**
- **اینوایت**: سیستم اینوایت با فرمول مستندت (3=1، 5=2، 10=3، 20=5) پیاده‌سازی شده. حالا ادمین می‌تونه فیلتر اینوایت رو با `!invitefilter on/off` روشن یا خاموش کنه. وقتی فعاله، ربات‌ها فیلتر می‌شن.
- **CCOIN**: خرید بلیط با CCOIN با قیمت‌های تخفیف‌دار (مثلاً 3 بلیط = 2800 CCOIN) اضافه شده. ادمین با `!setccoin` می‌تونه CCOIN کاربر رو تنظیم کنه.
- **چنل خصوصی**: برای هر برنده چنل خصوصی با دکمه "تحویل داده شد" ساخته می‌شه و بعد از 24 ساعت حذف می‌شه.
- **تأیید جایزه**: برنده باید مدرک (مثل عکس) بفرسته، ادمین تأیید می‌کنه و توی چنل عمومی منتشر می‌شه. 100 CCOIN پاداش هم می‌گیره.
- **رنگ‌ها و دکمه‌ها**: Embedها با رنگ‌های طلایی (شروع)، آبی (نتایج)، قرمز (خطا)، سبز (موفقیت) و دکمه‌های جذاب طراحی شدن.

#### **۲. حذف کامندهای معمولی و استفاده از دکمه**
- **ثبت‌نام**: با دکمه "✅ شرکت در قرعه‌کشی" زیر Embed انجام می‌شه.
- **خرید بلیط**: دکمه "💰 خرید بلیط با CCOIN" کاربر رو به `!buy` راهنمایی می‌کنه (چون نیاز به ورودی تعداد داره).

#### **۳. کامندهای مهم ادمین**
- `!startgiveaway [ساعت] [تعداد برندگان] [جایزه]`: شروع قرعه‌کشی با زمان و تعداد برندگان دلخواه.
- `!setccoin [کاربر] [مقدار]`: تنظیم CCOIN کاربر.
- `!invitefilter [on/off]`: روشن/خاموش کردن فیلتر اینوایت (جدید اضافه شده).

#### **۴. کامندهای کاربر**
- `!buy [تعداد]`: خرید بلیط با CCOIN.
- `!stats`: نمایش بلیط‌ها، CCOIN و اینوایت‌ها.

#### **۵. بهبودهای فنی**
- **فیلتر اینوایت قابل تنظیم**: با `!invitefilter on` فیلتر ربات‌ها فعاله، با `off` همه اینوایت‌ها (حتی ربات‌ها) محاسبه می‌شن.
- **پاکسازی خودکار**: قرعه‌کشی‌های منقضی‌شده هر 5 دقیقه چک می‌شن.
- **چندین برنده**: تعداد برندگان توسط ادمین تنظیم می‌شه.
- **مدیریت خطا**: دیتابیس با try-catch امن‌تر شده.

#### **۶. موارد اضافی**
- **فیلتر اینوایت**: حالا توی فایل `config.json` ذخیره می‌شه و ادمین کنترلش می‌کنه.
- **بدون لغو ثبت‌نام**: طبق درخواستت، این قابلیت اضافه نشده.

---

### **⚙️ راه‌اندازی توی Replit**
1. پروژه Node.js توی Replit بساز.
2. کد بالا رو توی `index.js` کپی کن.
3. فایل‌های `giveaways.json`، `users.json` و `config.json` رو با `{}` بساز (برای `config.json` می‌تونی `{"inviteFilterEnabled": true}` بذاری).
4. توی `package.json` اینو اضافه کن:
   ```json
   {
     "dependencies": {
       "discord.js": "^14.0.0"
     }
   }
   ```
5. توی متغیرهای محیطی Replit، `YOUR_BOT_TOKEN` رو با توکن رباتت پر کن.
6. `YOUR_GIVEAWAY_CHANNEL_ID` و `YOUR_WINNERS_CHANNEL_ID` رو با آیدی چنل‌ها جایگزین کن.
7. پروژه رو اجرا کن!

---

### **💡 نکات نهایی**
- **اتصال به ربات CCOIN**: الان CCOIN توی `users.json` ذخیره می‌شه. اگه ربات جدا داری، باید APIش رو وصل کنی.
- **فیلتر پیشرفته‌تر**: الان فقط ربات‌ها فیلتر می‌شن. اگه بخوای کاربران غیرفعال هم فیلتر بشن (مثلاً با پیام فرستادن)، بگو تا اضافه کنم.

این کد الان همه نیازهای مستندت رو پوشش می‌ده و درخواست جدیدت (فیلتر اینوایت قابل تنظیم و بدون لغو ثبت‌نام) هم اعمال شده. اگه چیزی دیگه بخوای، بگو تا برات درست کنم! 🚀