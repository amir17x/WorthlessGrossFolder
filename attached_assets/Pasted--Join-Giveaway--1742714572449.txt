خب، درخواستت رو بررسی کردم و کدت رو هم دیدم. می‌خوای بعد از اینکه کاربر روی دکمه "Join Giveaway" کلیک کرد، اگه بلیط نداشت، دو دکمه‌ی "Buy Tickets" و "Invite Friends" نمایش داده بشه. دکمه "Invite Friends" باید یه لینک اینوایت اختصاصی به کاربر بده که بتونه باهاش افراد رو دعوت کنه. همچنین ادمین‌ها باید بتونن تنظیم کنن که هر تعداد اینوایت چند بلیط بده (مثلاً 5 اینوایت = 2 بلیط یا هر مقداری که خودشون می‌خوان).

من کدت رو اصلاح می‌کنم تا این ویژگی‌ها رو اضافه کنم:
1. **دکمه‌های جدید بعد از Join**: اگه کاربر بلیط نداشته باشه، بعد از کلیک روی "Join Giveaway"، یه پیام با دو دکمه "Buy Tickets" و "Invite Friends" می‌فرستم.
2. **لینک اینوایت اختصاصی**: با کلیک روی "Invite Friends"، یه لینک اینوایت اختصاصی برای کاربر ساخته می‌شه و بهش داده می‌شه.
3. **تنظیمات اینوایت توسط ادمین**: یه اسلش کامند `/setinvitetickets` اضافه می‌کنم که ادمین بتونه تنظیم کنه هر چند اینوایت چند بلیط بده.
4. **حفظ همه ویژگی‌های قبلی**: همه چیزایی که قبلاً داشتی (مثل چنل خصوصی، تأیید جایزه، اسلش کامندها و ...) دست‌نخورده می‌مونه.

---

### **📝 کد اصلاح‌شده با ویژگی‌های جدید**

```javascript
const { Client, GatewayIntentBits, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionsBitField, SlashCommandBuilder } = require('discord.js');
const fs = require('fs');

const client = new Client({ 
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildInvites
  ]
});

let giveaways = {};
let users = {};
let inviteFilterEnabled = true;
let config = { 
  giveawayChannelId: null, 
  winnersChannelId: null, 
  inviteRules: { invites: 3, tickets: 1 } // پیش‌فرض: 3 اینوایت = 1 بلیط
};

function saveData() {
  try {
    fs.writeFileSync('giveaways.json', JSON.stringify(giveaways, null, 2));
    fs.writeFileSync('users.json', JSON.stringify(users, null, 2));
    fs.writeFileSync('config.json', JSON.stringify({ inviteFilterEnabled, ...config }, null, 2));
  } catch (err) {
    console.error('Error saving data:', err);
  }
}

function loadData() {
  try {
    if (fs.existsSync('giveaways.json')) giveaways = JSON.parse(fs.readFileSync('giveaways.json', 'utf8'));
    if (fs.existsSync('users.json')) users = JSON.parse(fs.readFileSync('users.json', 'utf8'));
    if (fs.existsSync('config.json')) {
      const loadedConfig = JSON.parse(fs.readFileSync('config.json', 'utf8'));
      inviteFilterEnabled = loadedConfig.inviteFilterEnabled;
      config.giveawayChannelId = loadedConfig.giveawayChannelId;
      config.winnersChannelId = loadedConfig.winnersChannelId;
      config.inviteRules = loadedConfig.inviteRules || { invites: 3, tickets: 1 };
    }
  } catch (err) {
    console.error('Error loading data:', err);
    giveaways = {};
    users = {};
    inviteFilterEnabled = true;
    config = { giveawayChannelId: null, winnersChannelId: null, inviteRules: { invites: 3, tickets: 1 } };
  }
  saveData();
}

loadData();

function cleanupExpiredGiveaways() {
  const now = Date.now();
  Object.entries(giveaways).forEach(([messageId, giveaway]) => {
    if (giveaway.endTime <= now) endGiveaway(messageId);
  });
}

client.on('guildMemberAdd', (member) => {
  member.guild.invites.fetch().then((guildInvites) => {
    const cachedInvites = client.invites?.get(member.guild.id) || new Map();
    guildInvites.forEach((invite) => {
      const oldInvite = cachedInvites.get(invite.code);
      if (oldInvite && invite.uses > oldInvite.uses && invite.inviter) {
        const inviterId = invite.inviter.id;
        users[inviterId] = users[inviterId] || { tickets: 0, ccoin: 0, invites: 0, inviteCode: null };
        if (!inviteFilterEnabled || !member.user.bot) {
          users[inviterId].invites++;
          updateTicketsFromInvites(inviterId);
        }
      }
    });
    client.invites?.set(member.guild.id, guildInvites);
  });
});

function updateTicketsFromInvites(userId) {
  const invites = users[userId].invites;
  const { invites: requiredInvites, tickets: rewardTickets } = config.inviteRules;
  const tickets = Math.floor(invites / requiredInvites) * rewardTickets;
  users[userId].tickets = Math.max(users[userId].tickets, tickets);
  saveData();
}

client.once('ready', () => {
  console.log(`✅ Bot ${client.user.tag} is online!`);
  client.invites = new Map();
  client.guilds.cache.forEach((guild) => {
    guild.invites.fetch().then((invites) => client.invites.set(guild.id, invites));
  });
  setInterval(cleanupExpiredGiveaways, 5 * 60 * 1000);

  const commands = [
    new SlashCommandBuilder()
      .setName('ping')
      .setDescription('Check bot latency'),
    new SlashCommandBuilder()
      .setName('giveaway')
      .setDescription('Start a new giveaway (Admin only)')
      .addIntegerOption(option => option.setName('hours').setDescription('Duration in hours').setRequired(true))
      .addIntegerOption(option => option.setName('winners').setDescription('Number of winners').setRequired(true))
      .addStringOption(option => option.setName('prize').setDescription('Prize description').setRequired(true)),
    new SlashCommandBuilder()
      .setName('invitefilter')
      .setDescription('Toggle invite filter (Admin only)')
      .addStringOption(option => option.setName('state').setDescription('on/off').setRequired(true).addChoices({ name: 'On', value: 'on' }, { name: 'Off', value: 'off' })),
    new SlashCommandBuilder()
      .setName('buy')
      .setDescription('Buy tickets with CCOIN')
      .addIntegerOption(option => option.setName('amount').setDescription('Number of tickets').setRequired(true)),
    new SlashCommandBuilder()
      .setName('stats')
      .setDescription('View your stats'),
    new SlashCommandBuilder()
      .setName('setccoin')
      .setDescription('Set CCOIN for a user (Admin only)')
      .addUserOption(option => option.setName('user').setDescription('Target user').setRequired(true))
      .addIntegerOption(option => option.setName('amount').setDescription('CCOIN amount').setRequired(true)),
    new SlashCommandBuilder()
      .setName('setchannel')
      .setDescription('Set giveaway or winners channel (Admin only)')
      .addStringOption(option => option.setName('type').setDescription('Channel type').setRequired(true).addChoices({ name: 'Giveaway', value: 'giveaway' }, { name: 'Winners', value: 'winners' }))
      .addChannelOption(option => option.setName('channel').setDescription('Target channel').setRequired(true)),
    new SlashCommandBuilder()
      .setName('setinvitetickets')
      .setDescription('Set invite-to-ticket ratio (Admin only)')
      .addIntegerOption(option => option.setName('invites').setDescription('Number of invites required').setRequired(true))
      .addIntegerOption(option => option.setName('tickets').setDescription('Number of tickets rewarded').setRequired(true))
  ];

  client.application.commands.set(commands);
});

client.on('interactionCreate', async interaction => {
  if (interaction.isCommand()) {
    const { commandName, options, member } = interaction;

    if (commandName === 'ping') {
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`🏓 Pong! ${client.ws.ping}ms`);
      await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'giveaway' && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      const hours = options.getInteger('hours');
      const winnersCount = options.getInteger('winners');
      const prize = options.getString('prize');
      
      if (hours <= 0 || winnersCount <= 0) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ ساعت و تعداد برندگان باید مثبت باشن!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      if (!config.giveawayChannelId) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ لطفاً اول چنل قرعه‌کشی رو با /setchannel تنظیم کن!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      const duration = hours * 60 * 60 * 1000;
      const endTime = Date.now() + duration;
      
      const embed = new EmbedBuilder()
        .setColor('#FFD700')
        .setTitle('🎉 قرعه‌کشی جدید 🎉')
        .setDescription(`
          جایزه: **${prize}**
          زمان: <t:${Math.floor(endTime / 1000)}:R>
          برندگان: ${winnersCount}
          
          شرکت‌کنندگان: 0
          مجموع بلیط‌ها: 0
          
          بلیط بگیر:
          • با دعوت دوستان (${config.inviteRules.invites} اینوایت = ${config.inviteRules.tickets} بلیط)
          • خرید با CCOIN (/buy)
        `)
        .setTimestamp();

      const joinButton = new ButtonBuilder()
        .setCustomId('join_giveaway')
        .setLabel('شرکت در قرعه‌کشی')
        .setEmoji('🎉')
        .setStyle(ButtonStyle.Success);

      const row = new ActionRowBuilder().addComponents(joinButton);
      const giveawayMsg = await client.channels.cache.get(config.giveawayChannelId).send({ embeds: [embed], components: [row] });
      
      giveaways[giveawayMsg.id] = { 
        prize, 
        endTime, 
        participants: {},
        winnersCount,
        channelId: config.giveawayChannelId
      };
      saveData();

      setTimeout(() => endGiveaway(giveawayMsg.id), duration);
      
      const successEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription('✅ قرعه‌کشی با موفقیت شروع شد!');
      await interaction.reply({ embeds: [successEmbed] });
    }

    else if (commandName === 'invitefilter' && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      inviteFilterEnabled = options.getString('state') === 'on';
      saveData();
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ فیلتر اینوایت ${inviteFilterEnabled ? 'فعال' : 'غیرفعال'} شد.`);
      await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'buy') {
      const amount = options.getInteger('amount');
      if (amount <= 0) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ تعداد بلیط باید مثبت باشه!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
      
      const cost = amount <= 2 ? amount * 1000 : amount === 3 ? 2800 : amount * 900;
      users[interaction.user.id] = users[interaction.user.id] || { tickets: 0, ccoin: 0, invites: 0, inviteCode: null };
      
      if (users[interaction.user.id].ccoin < cost) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ CCOIN کافی نداری!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      users[interaction.user.id].ccoin -= cost;
      users[interaction.user.id].tickets += amount;
      saveData();

      const successEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ ${amount} بلیط به قیمت ${cost} CCOIN خریدی!`);
      await interaction.reply({ embeds: [successEmbed] });
    }

    else if (commandName === 'stats') {
      users[interaction.user.id] = users[interaction.user.id] || { tickets: 0, ccoin: 0, invites: 0, inviteCode: null };
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('📊 وضعیت شما')
        .setDescription(`
          🎫 بلیط‌ها: ${users[interaction.user.id].tickets}
          💰 CCOIN: ${users[interaction.user.id].ccoin}
          📨 اینوایت‌ها: ${users[interaction.user.id].invites}
        `);
      await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'setccoin' && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      const targetUser = options.getUser('user');
      const amount = options.getInteger('amount');
      users[targetUser.id] = users[targetUser.id] || { tickets: 0, ccoin: 0, invites: 0, inviteCode: null };
      users[targetUser.id].ccoin = amount;
      saveData();
      
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ CCOIN کاربر ${targetUser.tag} به ${amount} تنظیم شد.`);
      await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'setchannel' && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      const type = options.getString('type');
      const channel = options.getChannel('channel');
      if (type === 'giveaway') config.giveawayChannelId = channel.id;
      else if (type === 'winners') config.winnersChannelId = channel.id;
      saveData();
      
      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ چنل ${type === 'giveaway' ? 'قرعه‌کشی' : 'برندگان'} به ${channel} تنظیم شد.`);
      await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'setinvitetickets' && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      const invites = options.getInteger('invites');
      const tickets = options.getInteger('tickets');
      if (invites <= 0 || tickets <= 0) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ تعداد اینوایت‌ها و بلیط‌ها باید مثبت باشه!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      config.inviteRules = { invites, tickets };
      saveData();

      // به‌روزرسانی بلیط‌های همه کاربران بر اساس قانون جدید
      Object.keys(users).forEach(userId => updateTicketsFromInvites(userId));

      const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ قانون اینوایت تنظیم شد: ${invites} اینوایت = ${tickets} بلیط`);
      await interaction.reply({ embeds: [embed] });
    }
  }

  else if (interaction.isButton()) {
    const { customId, user, message, guild } = interaction;
    users[user.id] = users[user.id] || { tickets: 0, ccoin: 0, invites: 0, inviteCode: null };

    if (customId === 'join_giveaway') {
      const giveaway = giveaways[message.id];
      if (!giveaway) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ این قرعه‌کشی تموم شده!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
      
      if (giveaway.participants[user.id]) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ قبلاً شرکت کردی!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      if (users[user.id].tickets === 0) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription(`❌ بلیط نداری!\n• با دعوت دوستان (${config.inviteRules.invites} اینوایت = ${config.inviteRules.tickets} بلیط)\n• خرید با CCOIN (/buy)`);

        const buyButton = new ButtonBuilder()
          .setCustomId('buy_ticket')
          .setLabel('خرید بلیط')
          .setEmoji('🎫')
          .setStyle(ButtonStyle.Primary);

        const inviteButton = new ButtonBuilder()
          .setCustomId('invite_friends')
          .setLabel('دعوت دوستان')
          .setEmoji('📨')
          .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(buyButton, inviteButton);
        return interaction.reply({ embeds: [errorEmbed], components: [row], ephemeral: true });
      }

      giveaway.participants[user.id] = users[user.id].tickets;
      saveData();

      const totalTickets = Object.values(giveaway.participants).reduce((a, b) => a + b, 0);
      const participantsCount = Object.keys(giveaway.participants).length;

      const updatedEmbed = new EmbedBuilder()
        .setColor('#FFD700')
        .setTitle('🎉 قرعه‌کشی جدید 🎉')
        .setDescription(`
          جایزه: **${giveaway.prize}**
          زمان: <t:${Math.floor(giveaway.endTime / 1000)}:R>
          برندگان: ${giveaway.winnersCount}
          
          شرکت‌کنندگان: ${participantsCount}
          مجموع بلیط‌ها: ${totalTickets}
          
          بلیط بگیر:
          • با دعوت دوستان (${config.inviteRules.invites} اینوایت = ${config.inviteRules.tickets} بلیط)
          • خرید با CCOIN (/buy)
        `)
        .setTimestamp();

      await message.edit({ embeds: [updatedEmbed] });
      
      const successEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription(`✅ با ${users[user.id].tickets} بلیط شرکت کردی!`);
      await interaction.reply({ embeds: [successEmbed], ephemeral: true });
    }

    else if (customId === 'buy_ticket') {
      const embed = new EmbedBuilder()
        .setColor('#0099ff')
        .setDescription('💰 برای خرید بلیط از `/buy <تعداد>` استفاده کن\nمثال: `/buy 3`');
      await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    else if (customId === 'invite_friends') {
      // اگر کاربر قبلاً لینک اینوایت داره، همون رو می‌فرستم
      if (users[user.id].inviteCode) {
        const embed = new EmbedBuilder()
          .setColor('#0099ff')
          .setDescription(`📨 لینک اینوایت اختصاصی تو:\nhttps://discord.gg/${users[user.id].inviteCode}\nبا دعوت دوستان (${config.inviteRules.invites} اینوایت = ${config.inviteRules.tickets} بلیط) بلیط بگیر!`);
        return interaction.reply({ embeds: [embed], ephemeral: true });
      }

      // ساخت لینک اینوایت اختصاصی
      const channel = guild.channels.cache.get(config.giveawayChannelId);
      if (!channel) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ چنل قرعه‌کشی پیدا نشد!');
        return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }

      try {
        const invite = await channel.createInvite({ maxUses: 0, unique: true, reason: `Invite for ${user.tag}` });
        users[user.id].inviteCode = invite.code;
        saveData();

        const embed = new EmbedBuilder()
          .setColor('#0099ff')
          .setDescription(`📨 لینک اینوایت اختصاصی تو:\n${invite.url}\nبا دعوت دوستان (${config.inviteRules.invites} اینوایت = ${config.inviteRules.tickets} بلیط) بلیط بگیر!`);
        await interaction.reply({ embeds: [embed], ephemeral: true });
      } catch (err) {
        console.error('Error creating invite:', err);
        const errorEmbed = new EmbedBuilder()
          .setColor('#ff0000')
          .setDescription('❌ نمی‌تونم لینک اینوایت بسازم! لطفاً دسترسی‌های ربات رو چک کن.');
        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
      }
    }

    else if (customId === 'claim_prize' && interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      const channel = interaction.channel;
      const winnerId = channel.name.split('-')[1];
      const proof = channel.messages.cache.last()?.attachments.first()?.url || 'بدون مدرک';

      const embed = new EmbedBuilder()
        .setColor('#0000FF')
        .setTitle('🏆 تأیید دریافت جایزه')
        .setDescription(`👤 برنده: <@${winnerId}>\n🎁 جایزه دریافت شد ✅\n📸 مدرک: ${proof}`)
        .setTimestamp();
      client.channels.cache.get(config.winnersChannelId).send({ embeds: [embed] });

      users[winnerId].ccoin += 100; // پاداش تأیید
      saveData();

      const successEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setDescription('✅ جایزه تأیید شد و در چنل عمومی منتشر شد.');
      await interaction.reply({ embeds: [successEmbed] });
      setTimeout(() => channel.delete(), 24 * 60 * 60 * 1000); // حذف چنل بعد از 24 ساعت
    }
  }
});

async function endGiveaway(messageId) {
  const giveaway = giveaways[messageId];
  if (!giveaway) return;

  const entries = [];
  for (const [userId, tickets] of Object.entries(giveaway.participants)) {
    for (let i = 0; i < tickets; i++) entries.push(userId);
  }

  const channel = await client.channels.fetch(giveaway.channelId);
  if (!channel) return;

  if (entries.length === 0) {
    const embed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('❌ قرعه‌کشی لغو شد')
      .setDescription(`به دلیل نداشتن شرکت‌کننده، قرعه‌کشی "${giveaway.prize}" لغو شد.`);
    channel.send({ embeds: [embed] });
  } else {
    const winners = [];
    for (let i = 0; i < Math.min(giveaway.winnersCount, entries.length); i++) {
      const winnerId = entries.splice(Math.floor(Math.random() * entries.length), 1)[0];
      if (!winners.includes(winnerId)) winners.push(winnerId);
    }

    const winnersText = winners.map((id, index) => `🏅 نفر ${index + 1}: <@${id}>`).join('\n');
    const embed = new EmbedBuilder()
      .setColor('#0000FF')
      .setTitle('🎉 نتایج قرعه‌کشی!')
      .setDescription(`🎁 جایزه: **${giveaway.prize}**\n${winnersText}`)
      .setTimestamp();
    channel.send({ content: '🎊 تبریک به برندگان!', embeds: [embed] });

    winners.forEach(async (winnerId) => {
      try {
        const user = await client.users.fetch(winnerId);
        const dmEmbed = new EmbedBuilder()
          .setColor('#00ff00')
          .setDescription(`🎉 تبریک! تو برنده قرعه‌کشی "${giveaway.prize}" شدی!\nلطفاً توی چنل خصوصی‌ات با ادمین هماهنگ کن.`);
        await user.send({ embeds: [dmEmbed] });
      } catch (err) {
        console.error(`Failed to DM ${winnerId}:`, err);
      }

      const winnerChannel = await channel.guild.channels.create({
        name: `winner-${winnerId}`,
        type: 0,
        permissionOverwrites: [
          { id: channel.guild.id, deny: ['ViewChannel'] },
          { id: winnerId, allow: ['ViewChannel', 'SendMessages'] },
          { id: channel.guild.roles.cache.find(r => r.permissions.has(PermissionsBitField.Flags.Administrator)).id, allow: ['ViewChannel', 'SendMessages'] }
        ]
      });

      const claimButton = new ButtonBuilder()
        .setCustomId('claim_prize')
        .setLabel('🎁 تحویل داده شد')
        .setStyle(ButtonStyle.Success);

      const row = new ActionRowBuilder().addComponents(claimButton);
      
      const instructionEmbed = new EmbedBuilder()
        .setColor('#0099ff')
        .setDescription('لطفاً جایزه‌ات رو تأیید کن! (عکس یا متن بفرست)');
      
      await winnerChannel.send({ content: `<@${winnerId}>`, embeds: [instructionEmbed], components: [row] });
    });
  }

  delete giveaways[messageId];
  saveData();
}

client.login('YOUR_BOT_TOKEN');
```

---

### **📚 توضیحات تغییرات**

#### **۱. تغییرات در دکمه‌ها**
- **حذف دکمه‌های اولیه Buy Tickets**: توی Embed اصلی قرعه‌کشی فقط دکمه "شرکت در قرعه‌کشی" (Join Giveaway) هست.
- **دکمه‌های جدید بعد از Join**: اگه کاربر بلیط نداشته باشه، بعد از کلیک روی "Join Giveaway"، یه پیام با دو دکمه "خرید بلیط" (Buy Tickets) و "دعوت دوستان" (Invite Friends) نمایش داده می‌شه.
  - **Buy Tickets**: مثل قبل کاربر رو به `/buy` راهنمایی می‌کنه.
  - **Invite Friends**: یه لینک اینوایت اختصاصی به کاربر می‌ده.

#### **۲. لینک اینوایت اختصاصی**
- **ساخت لینک**: وقتی کاربر روی "Invite Friends" کلیک می‌کنه، یه لینک اینوایت اختصاصی برای چنل قرعه‌کشی ساخته می‌شه و توی `users[user.id].inviteCode` ذخیره می‌شه.
- **استفاده مجدد**: اگه کاربر قبلاً لینک داشته باشه، همون لینک قبلی بهش نمایش داده می‌شه.
- **پیام**: لینک با یه پیام مثل `📨 لینک اینوایت اختصاصی تو: [لینک]` به کاربر داده می‌شه.

#### **۳. تنظیمات اینوایت توسط ادمین**
- **اسلش کامند `/setinvitetickets`**: ادمین می‌تونه با این کامند تنظیم کنه که هر چند اینوایت چند بلیط بده. مثلاً `/setinvitetickets 5 2` یعنی 5 اینوایت = 2 بلیط.
- **ذخیره‌سازی**: قانون اینوایت توی `config.inviteRules` ذخیره می‌شه.
- **به‌روزرسانی خودکار**: بعد از تغییر قانون، بلیط‌های همه کاربران بر اساس قانون جدید به‌روزرسانی می‌شه.

#### **۴. تطابق با تصویر**
- **پیام Embed**: توی Embed قرعه‌کشی، بخش "بلیط بگیر" با قانون اینوایت (مثلاً 3 اینوایت = 1 بلیط) نمایش داده می‌شه.
- **پیام خطا**: وقتی کاربر بلیط نداره، پیام خطا با دو دکمه "خرید بلیط" و "دعوت دوستان" نمایش داده می‌شه، دقیقاً مثل تصویر.
- **دکمه‌ها**: دکمه‌ها با ایموجی‌های مناسب (🎫 برای خرید و 📨 برای اینوایت) طراحی شدن.

#### **۵. حفظ همه ویژگی‌های قبلی**
- **اینوایت**: سیستم اینوایت با قانون جدید کار می‌کنه و فیلترش با `/invitefilter` قابل تنظیمه.
- **CCOIN**: خرید بلیط با `/buy` و تخفیف‌ها مثل قبل کار می‌کنه.
- **چنل خصوصی و تأیید جایزه**: برای هر برنده چنل خصوصی ساخته می‌شه و تأیید جایزه با پاداش 100 CCOIN انجام می‌شه.
- **اسلش کامندها**: همه کامندها (مثل `/ping`، `/setchannel` و ...) مثل قبل کار می‌کنن.

---

### **⚙️ راه‌اندازی توی Replit**
1. پروژه Node.js توی Replit بساز.
2. کد بالا رو توی `index.js` کپی کن.
3. فایل‌های `giveaways.json`، `users.json` و `config.json` رو با `{}` بساز (برای `config.json` می‌تونی `{"inviteFilterEnabled": true, "giveawayChannelId": null, "winnersChannelId": null, "inviteRules": {"invites": 3, "tickets": 1}}` بذاری).
4. توی `package.json` اینو بذار:
   ```json
   {
     "dependencies": {
       "discord.js": "^14.0.0"
     }
   }
   ```
5. توی متغیرهای محیطی Replit، `YOUR_BOT_TOKEN` رو با توکن رباتت پر کن.
6. پروژه رو اجرا کن!
7. با `/setchannel` چنل‌های قرعه‌کشی و برندگان رو تنظیم کن.
8. با `/setinvitetickets` قانون اینوایت رو تنظیم کن (مثلاً `/setinvitetickets 5 2`).

---

### **💡 نکات**
- **دسترسی‌ها**: مطمئن شو ربات دسترسی `Create Invite` داره تا بتونه لینک اینوایت بسازه.
- **تست**: اول با `/ping` چک کن ربات کار می‌کنه، بعد چنل‌ها رو تنظیم کن و یه قرعه‌کشی تست کن.
- **قانون اینوایت**: اگه قانون اینوایت رو تغییر بدی (مثلاً از 3 به 5 اینوایت)، بلیط‌های همه کاربران به‌صورت خودکار به‌روزرسانی می‌شه.

این کد الان همه خواسته‌هات (دکمه‌های جدید، لینک اینوایت اختصاصی، تنظیمات اینوایت توسط ادمین و ...) رو داره و با تصویرت هم کاملاً هم‌خوانی داره. اگه بازم چیزی بخوای، بگو تا برات درست کنم! 🚀